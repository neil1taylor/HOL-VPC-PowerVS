# Hands-on Lab 4: Introduction to IBM PowerVS (120 mins)

What you will learn:

* PowerVS fundamentals and service architecture.
* Virtual service instance deployment on PowerVS.
* PowerVS storage volume management.
* PowerVS management using console, CLI, and API interfaces.

## Prerequisites

- IBM Cloud account with appropriate permissions
- PowerVS service access in your desired region
- Understanding of your networking requirements

## Overview

PowerVS workspaces are region-specific containers for all your Power Virtual Server resources.


### Resources that will be deployed in this HOL

In this HOL, you will deploy the following:

Resource Type | Name | Notes
---------|----------|---------
Power Workspace | <TEAM_NAME>-powervs-wksp
Private Subnet | <TEAM_NAME>-power-db-sn
PowerVS VSI | <TEAM_NAME>db-powervs-vsi

This document references:

- `<TEAM_NAME>` this is your team name e.g. `team-1`
- `<TEAM_ID_NUMBER>` this is your team number e.g. `1`

### Steps



### Step 1: Create PowerVS Workspace

1. Create a PowerVS workspace that will contain all your Power Virtual Server resources. Follow the instructions at[Creating a Power Virtual Server workspace](https://cloud.ibm.com/docs/power-iaas?topic=power-iaas-creating-power-virtual-server#creating-service) using the following parameters:

   - **Location type**: `IBM datacenter`
   - **Location**: Dallas (us-south)
   - **Workspace name**: <TEAM_NAME>-powervs-wksp
   - **Resource group**: <TEAM_NAME>-app1-rg
   - **User tags**: `env:app1`

### Step 2: Verify SSH Key

1. From the newly created workspace, navigate to **SSH Keys** and ensure yor SSH keys are listed

### Step 3: Set Up Networks

1. Follow the instructions at [Configuring a private network subnet](https://cloud.ibm.com/docs/power-iaas?topic=power-iaas-configuring-subnet) to create a private subnet using the following parameters:
   
   - **Network name**: <TEAM_NAME>-power-db-sn
   - **CIDR**: 10.<TEAM_NUMBER>.8.0/24
   - **Gateway**: 10.<TEAM_NUMBER>.8.1
   - **DNS servers**: Use the IP addresses from your private DNS custom resolvers
   - **MTU**: 9000

### Step 4: Deploy Virtual Server Instance (VSI)

Follow the documentation at [Creating a Power Systems Virtual Server](https://cloud.ibm.com/docs/power-iaas?topic=power-iaas-creating-power-virtual-server) with the following parameters: 

   - **Instance name**: <TEAM_NAME>db-powervs-vsi
   - **User tags**: `env:app1`
   - **Virtual server pinning**: none
   - **SSH key**: <TEAM_NAME>-ssh-key-1
   - **Operating system**: IBM provides subscription - Linux.
   - **Image**: RHEL9-SP4
   - **Tier**: Tier 3
   - **Machine Type**: s922
   - **Core type**: Shared uncapped
   - **Profile**: System configuration
   - **Cores**: 0.25
   - **Memory**: 2
   - **Network**: <TEAM_NAME>-power-db-sn

## Step 5: Configure Network Security groups

Network Security groups enablement and configuration takes a little while, please be patient at each step and ensure the step completes before moving on to the next.

1. Follow the instructions at [Enabling or disabling NSG in a workspace](https://cloud.ibm.com/docs/power-iaas?topic=power-iaas-nsg#enable-disable-nsg)
2. Follow the instructions at [Network security groups](https://cloud.ibm.com/docs/power-iaas?topic=power-iaas-nsg) to enable Network Security groups using the following parameters:

    - **Network address groups**:
      - **Name**: mgmt-servers
      - **CIDR**: 10.<TEAM_NUMBER>.1.0.0/24
      - **Name**: app1-app-sn
      - **CIDR**: 10.<TEAM_NUMBER>.4.64/26
    - **Network security groups**:
      - **Inbound rules**:
        - **Any**:
          - **Action**: Allow
          - **Protocol**: Any
          - **Remote**: mgmt-servers
          - **Members**: <TEAM_NAME>db-powervs-vsi
        - **TCP**:
          - **Action**: Allow
          - **Protocol**: Any
          - **Remote**: mgmt-servers
          - **Source port range**: 5432-5432
          - **Members**: <TEAM_NAME>db-powervs-vsi




## Additional Information

### Cloud-init

SELinux can block PostgreSQL from accessing its data directory or configuration files. Without proper contexts, PostgreSQL might fail to start or function correctly. The restorecon commands ensure PostgreSQL files have the correct SELinux labels. The boolean settings allow PostgreSQL to perform necessary operations that SELinux might otherwise block

The cloud-init file we used:

* Installs PostgreSQL - Installs PostgreSQL server and client packages along with contrib modules
* Initializes Database - Runs the initial database setup using postgresql-setup --initdb
* Configures Authentication - Updates pg_hba.conf to allow password authentication for local connections
* Starts Services - Enables and starts the PostgreSQL service
* Creates Your Test Setup - Executes all your specified SQL commands to create:

    * testuser with password testpassword
    * testdb database owned by testuser
    * test_records table with the exact schema you specified
    * Proper privileges for the test user

* Security Configuration - Configures firewall if firewalld is active
* Status Script - Creates a utility script at /usr/local/bin/postgres-status.sh for checking the setup
* SELinux-specific additions:

    * Required Packages - Added policycoreutils-python-utils and setools-console for SELinux management tools
    * SELinux Status Check - Checks if SELinux is enabled before applying configurations
    * File Context Restoration - Uses restorecon -R /var/lib/pgsql/ to set proper SELinux contexts for PostgreSQL files
    * Context Restoration After Config - Restores contexts after modifying configuration files
    * SELinux Booleans - Sets important PostgreSQL-related booleans:

      * postgresql_can_rsync on - Allows PostgreSQL to use rsync for replication
      * nis_enabled on - Allows network connections (useful for future remote access)


